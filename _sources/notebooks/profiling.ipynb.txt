{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Profiling\n",
    "Sometimes computing the likelihood is not as fast as we would like. Theano provides handy profiling tools which are wrapped in PyMC3 by `model.profile`. This function returns a `ProfileStats` object conveying information about the underlying Theano operations. Here we'll profile the likelihood and gradient for the stochastic volatility example.\n",
    "\n",
    "First we build the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pymc3 import *\n",
    "from pymc3.math import exp\n",
    "from pymc3.distributions.timeseries import *\n",
    "\n",
    "returns = pd.read_csv(get_data('SP500.csv'), index_col=0, parse_dates=True)\n",
    "\n",
    "n = returns.shape[0]\n",
    "\n",
    "with Model() as model:\n",
    "    sigma = Exponential('sigma', 1. / .02, testval=.1)\n",
    "    nu = Exponential('nu', 1. / 10)\n",
    "    s = GaussianRandomWalk('s', sigma ** -2, shape=n)\n",
    "    r = StudentT('r', nu, lam=exp(-2 * s), observed=returns)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we call the `profile` function and summarize its return values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Function profiling\n",
      "==================\n",
      "  Message: /Users/ckrapu/miniconda3/envs/pymc3-dev/lib/python3.7/site-packages/pymc3-3.5-py3.7.egg/pymc3/model.py:910\n",
      "  Time in 1000 calls to Function.__call__: 4.618220e+00s\n",
      "  Time in Function.fn.__call__: 4.519772e+00s (97.868%)\n",
      "  Time in thunks: 4.468524e+00s (96.759%)\n",
      "  Total compile time: 1.687160e+00s\n",
      "    Number of Apply nodes: 26\n",
      "    Theano Optimizer time: 1.493099e+00s\n",
      "       Theano validate time: 4.654884e-03s\n",
      "    Theano Linker time (includes C, CUDA code generation/compiling): 1.448960e-01s\n",
      "       Import time 9.179330e-02s\n",
      "       Node make_thunk time 1.380470e-01s\n",
      "           Node Elemwise{Composite{exp((i0 * i1))}}(TensorConstant{(1, 1) of -2.0}, InplaceDimShuffle{x,0}.0) time 1.914692e-02s\n",
      "           Node Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 - (i3 * i0)), i4) + i5)}}(sigma, TensorConstant{0}, TensorConstant{3.9120230674743652}, TensorConstant{50.0}, TensorConstant{-inf}, sigma_log__) time 1.753592e-02s\n",
      "           Node Elemwise{add,no_inplace}(TensorConstant{(1, 1) of 1.0}, InplaceDimShuffle{x,x}.0) time 9.997129e-03s\n",
      "           Node Elemwise{Composite{Cast{int8}((GT(i0, i1) * i2 * GT(inv(sqrt(i0)), i1)))}}(Elemwise{Composite{exp((i0 * i1))}}.0, TensorConstant{(1, 1) of 0}, Elemwise{gt,no_inplace}.0) time 8.508921e-03s\n",
      "           Node Elemwise{Composite{scalar_gammaln((i0 * i1))}}(TensorConstant{(1, 1) of 0.5}, InplaceDimShuffle{x,x}.0) time 8.479118e-03s\n",
      "\n",
      "Time in all call to theano.grad() 0.000000e+00s\n",
      "Time since theano import 163.017s\n",
      "Class\n",
      "---\n",
      "<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>\n",
      "  92.6%    92.6%       4.138s       2.43e-04s     C    17000      17   theano.tensor.elemwise.Elemwise\n",
      "   7.1%    99.7%       0.318s       1.06e-04s     C     3000       3   theano.tensor.elemwise.Sum\n",
      "   0.2%    99.9%       0.007s       2.44e-06s     C     3000       3   theano.tensor.elemwise.DimShuffle\n",
      "   0.1%    99.9%       0.003s       1.48e-06s     C     2000       2   theano.tensor.subtensor.Subtensor\n",
      "   0.1%   100.0%       0.002s       2.43e-06s     C     1000       1   theano.tensor.opt.MakeVector\n",
      "   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)\n",
      "\n",
      "Ops\n",
      "---\n",
      "<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>\n",
      "  91.8%    91.8%       4.100s       4.10e-03s     C     1000        1   Elemwise{Composite{Switch(i0, (i1 - (i2 * i3 * log1p(((i4 * i5) / i6)))), i7)}}\n",
      "   7.1%    98.9%       0.318s       1.06e-04s     C     3000        3   Sum{acc_dtype=float64}\n",
      "   0.2%    99.0%       0.007s       7.25e-06s     C     1000        1   Elemwise{Composite{((i0 + (i1 * log(((i2 * i3) / i4)))) - i5)}}\n",
      "   0.1%    99.2%       0.006s       6.03e-06s     C     1000        1   Elemwise{Composite{exp((i0 * i1))}}\n",
      "   0.1%    99.3%       0.003s       3.49e-06s     C     1000        1   InplaceDimShuffle{x}\n",
      "   0.1%    99.3%       0.003s       3.43e-06s     C     1000        1   Elemwise{Composite{Switch(i0, (i1 * ((-(i2 * sqr((i3 - i4)))) + i5)), i6)}}\n",
      "   0.1%    99.4%       0.003s       1.64e-06s     C     2000        2   Elemwise{Composite{scalar_gammaln((i0 * i1))}}\n",
      "   0.1%    99.5%       0.003s       3.14e-06s     C     1000        1   Elemwise{Composite{Cast{int8}((GT(i0, i1) * i2 * GT(inv(sqrt(i0)), i1)))}}\n",
      "   0.1%    99.5%       0.003s       2.64e-06s     C     1000        1   InplaceDimShuffle{x,x}\n",
      "   0.1%    99.6%       0.003s       2.64e-06s     C     1000        1   Elemwise{add,no_inplace}\n",
      "   0.1%    99.6%       0.002s       2.43e-06s     C     1000        1   MakeVector{dtype='float64'}\n",
      "   0.0%    99.7%       0.002s       2.19e-06s     C     1000        1   Subtensor{int64::}\n",
      "   0.0%    99.7%       0.002s       2.17e-06s     C     1000        1   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 - (i3 * i0)), i4) + i5)}}[(0, 0)]\n",
      "   0.0%    99.8%       0.002s       1.77e-06s     C     1000        1   Elemwise{gt,no_inplace}\n",
      "   0.0%    99.8%       0.002s       8.57e-07s     C     2000        2   Elemwise{exp,no_inplace}\n",
      "   0.0%    99.9%       0.002s       1.63e-06s     C     1000        1   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 - (i3 * i0)), i4) + i5)}}\n",
      "   0.0%    99.9%       0.001s       1.47e-06s     C     1000        1   Elemwise{Composite{Cast{int8}(GT(i0, i1))}}\n",
      "   0.0%    99.9%       0.001s       1.36e-06s     C     1000        1   Elemwise{Composite{log((i0 * i1))}}\n",
      "   0.0%    99.9%       0.001s       1.20e-06s     C     1000        1   InplaceDimShuffle{x,0}\n",
      "   0.0%   100.0%       0.001s       8.85e-07s     C     1000        1   Elemwise{Composite{inv(sqrt(inv(sqr(i0))))}}[(0, 0)]\n",
      "   ... (remaining 2 Ops account for   0.03%(0.00s) of the runtime)\n",
      "\n",
      "Apply\n",
      "------\n",
      "<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>\n",
      "  91.8%    91.8%       4.100s       4.10e-03s   1000    19   Elemwise{Composite{Switch(i0, (i1 - (i2 * i3 * log1p(((i4 * i5) / i6)))), i7)}}(Elemwise{Composite{Cast{int8}((GT(i0, i1) * i2 * GT(inv(sqrt(i0)), i1)))}}.0, Elemwise{Composite{((i0 + (i1 * log(((i2 * i3) / i4)))) - i5)}}.0, TensorConstant{(1, 1) of 0.5}, Elemwise{add,no_inplace}.0, Elemwise{Composite{exp((i0 * i1))}}.0, TensorConstant{[[7.637491..7877e-07]]}, InplaceDimShuffle{x,x}.0, TensorConstant{(1, 1) of -inf})\n",
      "   7.1%    98.8%       0.316s       3.16e-04s   1000    22   Sum{acc_dtype=float64}(Elemwise{Composite{Switch(i0, (i1 - (i2 * i3 * log1p(((i4 * i5) / i6)))), i7)}}.0)\n",
      "   0.2%    99.0%       0.007s       7.25e-06s   1000    17   Elemwise{Composite{((i0 + (i1 * log(((i2 * i3) / i4)))) - i5)}}(Elemwise{Composite{scalar_gammaln((i0 * i1))}}.0, TensorConstant{(1, 1) of 0.5}, TensorConstant{(1, 1) of ..8861837907}, Elemwise{Composite{exp((i0 * i1))}}.0, InplaceDimShuffle{x,x}.0, Elemwise{Composite{scalar_gammaln((i0 * i1))}}.0)\n",
      "   0.1%    99.1%       0.006s       6.03e-06s   1000     6   Elemwise{Composite{exp((i0 * i1))}}(TensorConstant{(1, 1) of -2.0}, InplaceDimShuffle{x,0}.0)\n",
      "   0.1%    99.2%       0.003s       3.49e-06s   1000     8   InplaceDimShuffle{x}(sigma)\n",
      "   0.1%    99.3%       0.003s       3.43e-06s   1000    21   Elemwise{Composite{Switch(i0, (i1 * ((-(i2 * sqr((i3 - i4)))) + i5)), i6)}}(Elemwise{Composite{Cast{int8}(GT(i0, i1))}}.0, TensorConstant{(1,) of 0.5}, Elemwise{Composite{inv(sqr(i0))}}[(0, 0)].0, Subtensor{int64::}.0, Subtensor{:int64:}.0, Elemwise{Composite{log((i0 * i1))}}.0, TensorConstant{(1,) of -inf})\n",
      "   0.1%    99.3%       0.003s       3.14e-06s   1000    14   Elemwise{Composite{Cast{int8}((GT(i0, i1) * i2 * GT(inv(sqrt(i0)), i1)))}}(Elemwise{Composite{exp((i0 * i1))}}.0, TensorConstant{(1, 1) of 0}, Elemwise{gt,no_inplace}.0)\n",
      "   0.1%    99.4%       0.003s       2.78e-06s   1000    10   Elemwise{Composite{scalar_gammaln((i0 * i1))}}(TensorConstant{(1, 1) of 0.5}, InplaceDimShuffle{x,x}.0)\n",
      "   0.1%    99.5%       0.003s       2.64e-06s   1000     5   InplaceDimShuffle{x,x}(nu)\n",
      "   0.1%    99.5%       0.003s       2.64e-06s   1000     9   Elemwise{add,no_inplace}(TensorConstant{(1, 1) of 1.0}, InplaceDimShuffle{x,x}.0)\n",
      "   0.1%    99.6%       0.002s       2.43e-06s   1000    24   MakeVector{dtype='float64'}(__logp_sigma_log__, __logp_nu_log__, __logp_s, __logp_r)\n",
      "   0.0%    99.6%       0.002s       2.19e-06s   1000     4   Subtensor{int64::}(s, Constant{1})\n",
      "   0.0%    99.7%       0.002s       2.17e-06s   1000    20   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 - (i3 * i0)), i4) + i5)}}[(0, 0)](nu, TensorConstant{0}, TensorConstant{-2.3025850929940455}, TensorConstant{0.1}, TensorConstant{-inf}, nu_log__)\n",
      "   0.0%    99.7%       0.002s       1.77e-06s   1000    11   Elemwise{gt,no_inplace}(InplaceDimShuffle{x,x}.0, TensorConstant{(1, 1) of 0})\n",
      "   0.0%    99.8%       0.002s       1.63e-06s   1000     7   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 - (i3 * i0)), i4) + i5)}}(sigma, TensorConstant{0}, TensorConstant{3.9120230674743652}, TensorConstant{50.0}, TensorConstant{-inf}, sigma_log__)\n",
      "   0.0%    99.8%       0.002s       1.55e-06s   1000    23   Sum{acc_dtype=float64}(Elemwise{Composite{Switch(i0, (i1 * ((-(i2 * sqr((i3 - i4)))) + i5)), i6)}}.0)\n",
      "   0.0%    99.8%       0.001s       1.47e-06s   1000    15   Elemwise{Composite{Cast{int8}(GT(i0, i1))}}(Elemwise{Composite{inv(sqrt(inv(sqr(i0))))}}[(0, 0)].0, TensorConstant{(1,) of 0})\n",
      "   0.0%    99.9%       0.001s       1.39e-06s   1000     2   Elemwise{exp,no_inplace}(sigma_log__)\n",
      "   0.0%    99.9%       0.001s       1.36e-06s   1000    18   Elemwise{Composite{log((i0 * i1))}}(TensorConstant{(1,) of 0...4309189535}, Elemwise{Composite{inv(sqr(i0))}}[(0, 0)].0)\n",
      "   0.0%    99.9%       0.001s       1.20e-06s   1000     1   InplaceDimShuffle{x,0}(s)\n",
      "   ... (remaining 6 Apply instances account for 0.09%(0.00s) of the runtime)\n",
      "\n",
      "Here are tips to potentially make your code run faster\n",
      "                 (if you think of new ones, suggest them on the mailing list).\n",
      "                 Test them first, as they are not guaranteed to always provide a speedup.\n",
      "  - Try the Theano flag floatX=float32\n",
      "We don't know if amdlibm will accelerate this scalar op. scalar_gammaln\n",
      "We don't know if amdlibm will accelerate this scalar op. scalar_gammaln\n",
      "  - Try installing amdlibm and set the Theano flag lib.amdlibm=True. This speeds up only some Elemwise operation.\n"
     ]
    }
   ],
   "source": [
    "model.profile(model.logpt).summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Function profiling\n",
      "==================\n",
      "  Message: /Users/ckrapu/miniconda3/envs/pymc3-dev/lib/python3.7/site-packages/pymc3-3.5-py3.7.egg/pymc3/model.py:910\n",
      "  Time in 1000 calls to Function.__call__: 1.147447e+01s\n",
      "  Time in Function.fn.__call__: 1.134008e+01s (98.829%)\n",
      "  Time in thunks: 1.043050e+01s (90.902%)\n",
      "  Total compile time: 5.045708e+00s\n",
      "    Number of Apply nodes: 49\n",
      "    Theano Optimizer time: 2.870366e+00s\n",
      "       Theano validate time: 1.429296e-02s\n",
      "    Theano Linker time (includes C, CUDA code generation/compiling): 2.071112e+00s\n",
      "       Import time 1.761718e-01s\n",
      "       Node make_thunk time 2.066094e+00s\n",
      "           Node Alloc(Elemwise{switch,no_inplace}.0, TensorConstant{401}, Shape_i{0}.0) time 1.797580e+00s\n",
      "           Node Elemwise{Composite{Switch(i0, (i1 * (i2 - i3)), i4)}}(Elemwise{Composite{Cast{int8}(GT(i0, i1))}}.0, InplaceDimShuffle{x}.0, Subtensor{int64::}.0, Subtensor{:int64:}.0, TensorConstant{(1,) of 0}) time 1.598787e-02s\n",
      "           Node Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 * i0), i1) + i3 + (i4 * (((i5 * i6 * Composite{inv(Composite{(sqr(i0) * i0)}(i0))}(i7)) / i8) - (i9 * Composite{inv(Composite{(sqr(i0) * i0)}(i0))}(i7))) * (i10 ** i11) * inv(Composite{(sqr(i0) * i0)}(i0)) * i0))}}[(0, 0)](sigma, TensorConstant{0}, TensorConstant{-50.0}, TensorConstant{1.0}, TensorConstant{-2.0}, TensorConstant{0.5}, Sum{acc_dtype=float64}.0, Elemwise{Composite{inv(sqrt(i0))}}.0, Elemwise{Composite{inv(sqr(i0))}}.0, Sum{acc_dtype=float64}.0, Elemwise{Composite{inv(sqr(i0))}}.0, TensorConstant{-1.5}) time 1.419187e-02s\n",
      "           Node Elemwise{Composite{exp((i0 * i1))}}(TensorConstant{(1,) of -2.0}, s) time 1.391387e-02s\n",
      "           Node Elemwise{Composite{(i0 * ((i1 * i2) + (i3 * i4)))}}[(0, 2)](TensorConstant{(1,) of -2.0}, TensorConstant{(1,) of 0.5}, Sum{axis=[0], acc_dtype=float64}.0, Sum{axis=[0], acc_dtype=float64}.0, Elemwise{Composite{exp((i0 * i1))}}.0) time 1.356912e-02s\n",
      "\n",
      "Time in all call to theano.grad() 1.094223e+01s\n",
      "Time since theano import 190.878s\n",
      "Class\n",
      "---\n",
      "<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>\n",
      "  70.5%    70.5%       7.352s       2.94e-04s     C    25000      25   theano.tensor.elemwise.Elemwise\n",
      "  23.4%    93.9%       2.444s       3.49e-04s     C     7000       7   theano.tensor.elemwise.Sum\n",
      "   5.2%    99.1%       0.545s       2.73e-04s     C     2000       2   theano.tensor.basic.Alloc\n",
      "   0.4%    99.5%       0.040s       2.00e-05s     C     2000       2   theano.tensor.subtensor.IncSubtensor\n",
      "   0.2%    99.7%       0.020s       3.90e-06s     C     5000       5   theano.tensor.elemwise.DimShuffle\n",
      "   0.1%    99.9%       0.016s       1.55e-05s     C     1000       1   theano.tensor.basic.Join\n",
      "   0.1%    99.9%       0.006s       3.25e-06s     C     2000       2   theano.tensor.basic.Reshape\n",
      "   0.0%   100.0%       0.005s       2.38e-06s     C     2000       2   theano.tensor.subtensor.Subtensor\n",
      "   0.0%   100.0%       0.002s       8.01e-07s     C     2000       2   theano.compile.ops.Rebroadcast\n",
      "   0.0%   100.0%       0.002s       1.52e-06s     C     1000       1   theano.compile.ops.Shape_i\n",
      "   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)\n",
      "\n",
      "Ops\n",
      "---\n",
      "<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>\n",
      "  42.1%    42.1%       4.395s       4.40e-03s     C     1000        1   Elemwise{Composite{Switch(i0, (-log1p((i1 / i2))), i3)}}\n",
      "  16.1%    58.2%       1.676s       8.38e-04s     C     2000        2   Sum{axis=[0], acc_dtype=float64}\n",
      "  14.0%    72.2%       1.459s       1.46e-03s     C     1000        1   Elemwise{Composite{Switch(i0, ((i1 * i2 * i3 * i4) / i5), i6)}}\n",
      "   7.4%    79.6%       0.768s       1.54e-04s     C     5000        5   Sum{acc_dtype=float64}\n",
      "   6.3%    85.9%       0.661s       3.30e-04s     C     2000        2   Elemwise{mul,no_inplace}\n",
      "   5.3%    91.2%       0.558s       5.58e-04s     C     1000        1   Elemwise{Composite{Switch(i0, (i1 / i2), i3)}}[(0, 2)]\n",
      "   5.2%    96.5%       0.545s       2.73e-04s     C     2000        2   Alloc\n",
      "   1.9%    98.4%       0.199s       1.99e-04s     C     1000        1   Elemwise{Add}[(0, 1)]\n",
      "   0.3%    98.6%       0.028s       2.79e-05s     C     1000        1   IncSubtensor{InplaceInc;int64::}\n",
      "   0.1%    98.8%       0.016s       5.18e-06s     C     3000        3   InplaceDimShuffle{x}\n",
      "   0.1%    98.9%       0.016s       1.55e-05s     C     1000        1   Join\n",
      "   0.1%    99.1%       0.012s       1.21e-05s     C     1000        1   IncSubtensor{InplaceInc;:int64:}\n",
      "   0.1%    99.1%       0.009s       9.24e-06s     C     1000        1   Elemwise{Composite{Switch(i0, (i1 * i2 * (i3 - i4)), i5)}}\n",
      "   0.1%    99.2%       0.009s       8.52e-06s     C     1000        1   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 * i0), i1) + i3 + (i4 * i5 * psi((i4 * (i6 + i0))) * i0) + (i7 * i8 * i9) + (i10 * i4 * i11 * psi((i4 * i0)) * i0) + (i4 * i12 * i0) + i13)}}[(0, 0)]\n",
      "   0.1%    99.3%       0.007s       7.16e-06s     C     1000        1   Elemwise{Composite{exp((i0 * i1))}}\n",
      "   0.1%    99.4%       0.007s       3.26e-06s     C     2000        2   Elemwise{switch,no_inplace}\n",
      "   0.1%    99.4%       0.007s       6.50e-06s     C     1000        1   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 * i0), i1) + i3 + (i4 * (((i5 * i6 * Composite{inv(Composite{(sqr(i0) * i0)}(i0))}(i7)) / i8) - (i9 * Composite{inv(Composite{(sqr(i0) * i0)}(i0))}(i7))) * (i10 ** i11) * inv(Composite{(sqr(i0) * i0)}(i0)) * i0))}}[(0, 0)]\n",
      "   0.1%    99.5%       0.006s       3.25e-06s     C     2000        2   Reshape{1}\n",
      "   0.1%    99.5%       0.006s       6.45e-06s     C     1000        1   Elemwise{Composite{Switch(i0, (i1 * (i2 - i3)), i4)}}\n",
      "   0.1%    99.6%       0.006s       5.96e-06s     C     1000        1   Elemwise{Composite{(i0 * ((i1 * i2) + (i3 * i4)))}}[(0, 2)]\n",
      "   ... (remaining 15 Ops account for   0.40%(0.04s) of the runtime)\n",
      "\n",
      "Apply\n",
      "------\n",
      "<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>\n",
      "  42.1%    42.1%       4.395s       4.40e-03s   1000    21   Elemwise{Composite{Switch(i0, (-log1p((i1 / i2))), i3)}}(Elemwise{Composite{Cast{int8}((GT(i0, i1) * i2 * GT(inv(sqrt(i0)), i1)))}}.0, Elemwise{mul,no_inplace}.0, InplaceDimShuffle{x,x}.0, TensorConstant{(1, 1) of 0})\n",
      "  14.0%    56.1%       1.459s       1.46e-03s   1000    30   Elemwise{Composite{Switch(i0, ((i1 * i2 * i3 * i4) / i5), i6)}}(Elemwise{Composite{Cast{int8}((GT(i0, i1) * i2 * GT(inv(sqrt(i0)), i1)))}}.0, TensorConstant{(1, 1) of 0.5}, Elemwise{add,no_inplace}.0, InplaceDimShuffle{x,0}.0, TensorConstant{[[7.637491..7877e-07]]}, Elemwise{Add}[(0, 1)].0, TensorConstant{(1, 1) of 0})\n",
      "   8.4%    64.5%       0.876s       8.76e-04s   1000    32   Sum{axis=[0], acc_dtype=float64}(Alloc.0)\n",
      "   7.7%    72.2%       0.800s       8.00e-04s   1000    37   Sum{axis=[0], acc_dtype=float64}(Elemwise{Composite{Switch(i0, (i1 / i2), i3)}}[(0, 2)].0)\n",
      "   6.2%    78.4%       0.652s       6.52e-04s   1000    12   Elemwise{mul,no_inplace}(InplaceDimShuffle{x,0}.0, TensorConstant{[[7.637491..7877e-07]]})\n",
      "   5.3%    83.8%       0.558s       5.58e-04s   1000    33   Elemwise{Composite{Switch(i0, (i1 / i2), i3)}}[(0, 2)](Elemwise{Composite{Cast{int8}((GT(i0, i1) * i2 * GT(inv(sqrt(i0)), i1)))}}.0, Elemwise{mul,no_inplace}.0, Elemwise{Add}[(0, 1)].0, TensorConstant{(1, 1) of 0})\n",
      "   5.2%    89.0%       0.539s       5.39e-04s   1000    27   Alloc(Elemwise{switch,no_inplace}.0, TensorConstant{401}, Shape_i{0}.0)\n",
      "   3.7%    92.6%       0.384s       3.84e-04s   1000    35   Sum{acc_dtype=float64}(Elemwise{Composite{Switch(i0, ((i1 * i2 * i3 * i4) / i5), i6)}}.0)\n",
      "   3.6%    96.2%       0.376s       3.76e-04s   1000    28   Sum{acc_dtype=float64}(Elemwise{Composite{Switch(i0, (-log1p((i1 / i2))), i3)}}.0)\n",
      "   1.9%    98.2%       0.199s       1.99e-04s   1000    22   Elemwise{Add}[(0, 1)](InplaceDimShuffle{x,x}.0, Elemwise{mul,no_inplace}.0)\n",
      "   0.3%    98.4%       0.028s       2.79e-05s   1000    43   IncSubtensor{InplaceInc;int64::}(Elemwise{Composite{(i0 * ((i1 * i2) + (i3 * i4)))}}[(0, 2)].0, Elemwise{Composite{Switch(i0, (i1 * i2 * (i3 - i4)), i5)}}.0, Constant{1})\n",
      "   0.1%    98.6%       0.016s       1.55e-05s   1000    48   Join(TensorConstant{0}, Rebroadcast{1}.0, Rebroadcast{1}.0, (d__logp/ds))\n",
      "   0.1%    98.7%       0.012s       1.21e-05s   1000    46   IncSubtensor{InplaceInc;:int64:}(IncSubtensor{InplaceInc;int64::}.0, Elemwise{Composite{Switch(i0, (i1 * (i2 - i3)), i4)}}.0, Constant{-1})\n",
      "   0.1%    98.8%       0.009s       9.24e-06s   1000    24   Elemwise{Composite{Switch(i0, (i1 * i2 * (i3 - i4)), i5)}}(Elemwise{Composite{Cast{int8}(GT(i0, i1))}}.0, TensorConstant{(1,) of -1.0}, InplaceDimShuffle{x}.0, Subtensor{int64::}.0, Subtensor{:int64:}.0, TensorConstant{(1,) of 0})\n",
      "   0.1%    98.9%       0.009s       8.98e-06s   1000    16   Elemwise{mul,no_inplace}(TensorConstant{(1, 1) of -0.5}, Elemwise{add,no_inplace}.0, TensorConstant{[[7.637491..7877e-07]]})\n",
      "   0.1%    98.9%       0.009s       8.52e-06s   1000    39   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 * i0), i1) + i3 + (i4 * i5 * psi((i4 * (i6 + i0))) * i0) + (i7 * i8 * i9) + (i10 * i4 * i11 * psi((i4 * i0)) * i0) + (i4 * i12 * i0) + i13)}}[(0, 0)](nu, TensorConstant{0}, TensorConstant{-0.1}, TensorConstant{1.0}, TensorConstant{0.5}, Sum{acc_dtype=float64}.0, TensorConstant{1.0}, TensorConstant{3.141592653589793}, TensorConstant{-0.15915494309189535}, Sum{acc_dtype=float64}.0, TensorConstant{\n",
      "   0.1%    99.0%       0.007s       7.27e-06s   1000    14   InplaceDimShuffle{x}(Elemwise{Composite{inv(sqrt(i0))}}.0)\n",
      "   0.1%    99.1%       0.007s       7.16e-06s   1000     5   Elemwise{Composite{exp((i0 * i1))}}(TensorConstant{(1,) of -2.0}, s)\n",
      "   0.1%    99.1%       0.007s       6.50e-06s   1000    41   Elemwise{Composite{(Switch(Cast{int8}(GE(i0, i1)), (i2 * i0), i1) + i3 + (i4 * (((i5 * i6 * Composite{inv(Composite{(sqr(i0) * i0)}(i0))}(i7)) / i8) - (i9 * Composite{inv(Composite{(sqr(i0) * i0)}(i0))}(i7))) * (i10 ** i11) * inv(Composite{(sqr(i0) * i0)}(i0)) * i0))}}[(0, 0)](sigma, TensorConstant{0}, TensorConstant{-50.0}, TensorConstant{1.0}, TensorConstant{-2.0}, TensorConstant{0.5}, Sum{acc_dtype=float64}.0, Elemwise{Composite{inv(sqrt(i0))}}.0\n",
      "   0.1%    99.2%       0.006s       6.47e-06s   1000    34   Alloc(Elemwise{switch,no_inplace}.0, Elemwise{Composite{(i0 - Switch(LT(i1, i0), i2, i0))}}[(0, 0)].0)\n",
      "   ... (remaining 29 Apply instances account for 0.79%(0.08s) of the runtime)\n",
      "\n",
      "Here are tips to potentially make your code run faster\n",
      "                 (if you think of new ones, suggest them on the mailing list).\n",
      "                 Test them first, as they are not guaranteed to always provide a speedup.\n",
      "  - Try the Theano flag floatX=float32\n",
      "We don't know if amdlibm will accelerate this scalar op. psi\n",
      "We don't know if amdlibm will accelerate this scalar op. psi\n",
      "  - Try installing amdlibm and set the Theano flag lib.amdlibm=True. This speeds up only some Elemwise operation.\n"
     ]
    }
   ],
   "source": [
    "model.profile(gradient(model.logpt, model.vars)).summary()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
